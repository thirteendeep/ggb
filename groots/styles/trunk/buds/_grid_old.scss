// ==========================================================================
// Grid Custom System
// ==========================================================================

// !! Requires map-variables $grid-breakpoints
//
// @example scss - Usage
//     @include grid(
//          attribute       (default: 'grid')
//          columns         (default: 12)
//          gutter-width    (default: 0)
//          max-width       (default: 100%)
//      );

%container {

    width: 100%;
    margin: 0 auto;
    max-width: $grid-container-width;

    @if($grid-gutter-width != 0) {
        padding-left: ($grid-gutter-width / 2);
        padding-right: ($grid-gutter-width / 2);
    }
}

%row {
    position: relative;
    margin-left: (-1 * ($grid-gutter-width / 2));
    margin-right: (-1 * ($grid-gutter-width / 2));
    display: flex;
    flex-flow: row wrap;

}

@mixin flex-grid($attribute: 'gr-grid', $attribute-columns: 12, $gutter: 0, $max-width: 100%) {

    /* Container */
    [#{$attribute}^='container'] {

        @extend %container;

        /* Container fluid*/
        &[#{$attribute}$='--fluid'] {
            max-width: 100%;
        }
    }

    /* Row */
    [#{$attribute}~=row],
    [#{$attribute}~=row--block] {
        @extend %row;

        /* Collapse without breakpoint */
        &[#{$attribute}~=collapse] {
            > [#{$attribute}] {
                padding-left: 0;
                padding-right: 0;
            }
        }

        /* Uncollapse without breakpoint */
        &[#{$attribute}~=uncollapse] {
            > [#{$attribute}] {
                padding-left: ($gutter / 2);
                padding-right: ($gutter / 2);
            }
        }
    }

    /* Columns */
    [#{$attribute}~=row] {
        [#{$attribute}*='-'],
        [#{$attribute}~=column] {
            width: 100%;
            display: block;
            flex: 1 1 auto;

            @if($gutter != 0) {
                padding-left: ($gutter / 2);
                padding-right: ($gutter / 2);
            }
        }
    }

    /* Block column */
    [#{$attribute}=block] {
        flex: 1 1 100%;

        @if($gutter != 0) {
            padding-left: ($gutter / 2);
            padding-right: ($gutter / 2);
        }
    }

    @each $bp, $w in $grid-breakpoints {
        @media only screen and (min-width: #{$w}) {
            @for $i from 1 through $attribute-columns {

                [#{$attribute}~=row] [#{$attribute}~='#{$bp}-#{$i}'] {
                    flex-basis: col-math($i);
                }

                [#{$attribute}~=row] {
                    [#{$attribute}~='#{$bp}-offset-#{$i}'] {
                        margin-left: col-math($i);
                    }

                    [#{$attribute}~='#{$bp}-pull-#{$i}'] {
                        position: relative;
                        right: col-math($i);
                    }

                    [#{$attribute}~='#{$bp}-push-#{$i}'] {
                        position: relative;
                        left: col-math($i);
                    }
                }

                [#{$attribute}~=row--block][#{$attribute}~='#{$bp}-#{$i}'] [#{$attribute}=block] {
                    flex-basis: col-math($attribute-columns / $i);
                }
            }

            [#{$attribute}~=row] {

                &[#{$attribute}~='#{$bp}-collapse'] {
                    > [#{$attribute}] {
                        padding-left: 0;
                        padding-right: 0;
                    }
                }

                &[#{$attribute}~='#{$bp}-uncollapse'] {
                    > [#{$attribute}] {
                        padding-left: ($gutter / 2);
                        padding-right: ($gutter / 2);
                    }
                }
            }

            [#{$attribute}~=row--block] {
                &[#{$attribute}~='#{$bp}-collapse'] {
                    > [#{$attribute}=block] {
                        padding-left: 0;
                        padding-right: 0;
                    }
                }

                &[#{$attribute}~='#{$bp}-uncollapse'] {
                    > [#{$attribute}=block] {
                        padding-left: ($gutter / 2);
                        padding-right: ($gutter / 2);
                    }
                }
            }
        }
    }
}


/// Calculate the columns
@function col-math($col) {
    $width: 0;

    @if type-of($col) == 'number' {
        $width: 100% / $grid-columns * $col;

        @if unit($col) == '%' {
            $width: $col;
        }
    } @else if type-of($col) == 'list' {
        $width: percentage(nth($col, 1) / nth($col, 3));
    } @else {
        $width: $col;
    }
    @return $width;
}


// @mixin container($full-wdith: false, $attribute: 'gr-grid') {
//     @extend [#{$attribute}^='container'];

//     @if($full-wdith) {
//         @extend [#{$attribute}$='--fluid'];
//     }
// }

// @mixin row($attribute: 'gr-grid') {
//     @extend [#{$attribute}~=row];
// }

@mixin col($bp, $col, $attribute: 'gr-grid') {

    display: block;
    flex: 1 1 auto;

    @if($grid-gutter-width != 0) {
        padding-left: ($grid-gutter-width / 2);
        padding-right: ($grid-gutter-width / 2);
    }

    @include mq($bp) {
        flex-basis: col-math($col);
    }
}

// @mixin collapse($bp, $child, $attribute: 'gr-grid') {

//     @include mq($bp) {
//         > #{$child} {
//             padding-left: 0;
//             padding-right: 0;

//             &:before {
//                 width: 100%;
//                 left:0;
//             }
//         }
//     }
// }

// @mixin uncollapse($bp, $child, $attribute: 'gr-grid') {

//     @include mq($bp) {
//         > #{$child} {
//             padding-left: $grid-gutter-width/2;
//             padding-right: $grid-gutter-width/2;

//             &:before {
//                 width: calc(100% - #{$grid-gutter-width});
//                 left: 15px;
//             }
//         }
//     }
// }

// @mixin offset($bp, $col, $attribute: 'gr-grid') {
//     margin-left: col-math($col);
// }

// @mixin push($bp, $col, $attribute: 'gr-grid') {
//     left: col-math($col);
// }

// @mixin pull($bp, $col, $attribute: 'gr-grid') {
//     right: col-math($col);
// }

// @mixin block-grid($bp, $col, $attribute: 'gr-grid') {
//     @extend [block-#{$attribute}]:not([block-#{$attribute}=block]);
//     @extend [block-#{$attribute}~='#{$bp}-#{$col}'];
// }

// @mixin block($attribute: 'gr-grid') {
//     @extend [block-#{$attribute}=block];
// }

// @mixin block-collapse($bp, $attribute: 'gr-grid') {

//     @include mq($bp) {
//         [block-#{$attribute}=block] {
//             padding-left: 0;
//             padding-right: 0;
//         }
//     }
// }

// @mixin block-uncollapse($bp, $attribute: 'gr-grid') {

//     @include mq($bp) {
//         [block-#{$attribute}=block] {
//             padding-left: $grid-gutter-width/2;
//             padding-right: $grid-gutter-width/2;
//         }
//     }
// }

// @mixin row-center($bp, $attribute: 'gr-grid') {
//     @extend [#{$attribute}~='center-#{$bp}'];
// }

// @mixin row-between($bp, $attribute: 'gr-grid') {
//     @include mq($bp) {
//         justify-content: space-between;
//     }
// }

// @mixin row-around($bp, $attribute: 'gr-grid') {
//     @extend [#{$attribute}~='around-#{$bp}'];
// }

// @mixin grid-doc($doc: '') {
//     &:before {
//         content: '#{$doc}';
//     }
// }
