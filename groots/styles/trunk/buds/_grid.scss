// ==========================================================================
// Grid Custom System
// ==========================================================================

// !! Requires map-variables $grid-breakpoints

%container {
    width: 100%;
    margin: 0 auto;
    max-width: $grid-container-width;

    @if($grid-gutter-width != 0) {
        padding-left: ($grid-gutter-width / 2);
        padding-right: ($grid-gutter-width / 2);
    }
}

%container-fluid {
    @extend %container;
    max-width: 100%;
}

%row {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    display: -webkit-flex;
    -webkit-flex-direction: row;
    -webkit-flex-wrap: wrap;

    @if($grid-gutter-width != 0) {
        margin-left: -$grid-gutter-width/2;
        margin-right: -$grid-gutter-width/2;
    }
}

%col {
    display: block;

    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 100%;
    -webkit-flex-basis: 100%;

    @if($grid-gutter-width != 0) {
        padding-left: $grid-gutter-width/2;
        padding-right: $grid-gutter-width/2;
    }
}

@mixin col($bp, $col) {
    @extend %col;

    @include mq($bp) {
        flex-basis: 0;
        flex-grow: col-math($col);
    }
}

%row-block {
    position: relative;
    display: flex;
    display: -webkit-flex;
    flex-direction: row;
    flex-wrap: wrap;

    -webkit-flex-direction: row;
    -webkit-flex-wrap: wrap;

    @if($grid-gutter-width != 0) {
        margin-left: -$grid-gutter-width/2;
        margin-right: -$grid-gutter-width/2;
    }
}

%block {
    flex: 1 1 auto;
    flex-basis: 100%;
    -webkit-flex-basis: 100%;
    max-width: 100%;

    @if($grid-gutter-width != 0) {
        padding-left: $grid-gutter-width/2;
        padding-right: $grid-gutter-width/2;
    }
}

@mixin collapse($collapse: true) {
    @if ($collapse) {
        padding-left: 0;
        padding-right: 0;
    } @else {
        padding-left: $grid-gutter-width/2;
        padding-right: $grid-gutter-width/2;
    }
}

@function col-math($col) {
    $column: 0;

    @if type-of($col) == 'number' {
        $column: $col;
    } @else if type-of($col) == 'list' {
        $column: nth($col, 1) / nth($col, 3);
    } @else {
        $column: $col;
    }
    @return $column;
}

@mixin grid($attribute: 'gr-grid', $attribute-columns: 12, $gutter: 0, $max-width: 100%, $flexbox: true) {

    /* Container */
    [#{$attribute}^='container'] {
        @extend %container;

        /* Container fluid*/
        &[#{$attribute}$='--fluid'] {
            @extend %container-fluid;
        }
    }

    /* Row */
    [#{$attribute}~=row] {
        @extend %row;

        /* Collapse without breakpoint */
        &[#{$attribute}~=collapse] {
            > [#{$attribute}] {
                @include collapse;
            }
        }

        /* Uncollapse without breakpoint */
        &[#{$attribute}~=uncollapse] {
            > [#{$attribute}] {
                @include collapse(false);
            }
        }
    }

    /* block grid row */
    [#{$attribute}~=row--block] {
        @extend %row-block;
    }

    /* Columns */
    [#{$attribute}~=row] {
        > [#{$attribute}*='-'],
        [#{$attribute}~=column] {
            @extend %col;
        }
    }

    /* Block column */
    [#{$attribute}=block] {
        @extend %block;
    }

    @each $bp, $w in $grid-breakpoints {
        @media only screen and (min-width: #{$w}) {
            @for $i from 1 through $attribute-columns {

                [#{$attribute}~=row] [#{$attribute}~='#{$bp}-#{$i}'] {
                    flex-grow: $i;
                    flex-basis: 0;
                }

                [#{$attribute}~=row--block][#{$attribute}~='#{$bp}-#{$i}'] {

                    [#{$attribute}=block] {
                        flex-basis: 100% / $i;
                        -webkit-flex-basis: 100% / $i;
                        max-width: 100% / $i;
                    }
                }

                //todo remove offset
                [#{$attribute}~=row] {
                    [#{$attribute}~='#{$bp}-offset-#{$i}'] {
                        margin-left: 100% / $grid-columns * $i;
                    }
                }
            }
        }
    }

    @each $bp, $w in $grid-breakpoints {
        @media only screen and (min-width: #{$w}) {
            [#{$attribute}~=row] {

                &[#{$attribute}~='#{$bp}-collapse'] {
                    > [#{$attribute}] {
                        @include collapse;
                    }
                }

                &[#{$attribute}~='#{$bp}-uncollapse'] {
                    > [#{$attribute}] {
                        @include collapse(false);
                    }
                }
            }

            [#{$attribute}~=row--block] {
                &[#{$attribute}~='#{$bp}-collapse'] {
                    > [#{$attribute}=block] {
                        @include collapse;
                    }
                }

                &[#{$attribute}~='#{$bp}-uncollapse'] {

                    > [#{$attribute}=block] {
                        @include collapse(false);
                    }
                }
            }
        }
    }
}


@mixin grid-doc($doc: '') {
    &:before {
        content: '#{$doc}';
    }
}
